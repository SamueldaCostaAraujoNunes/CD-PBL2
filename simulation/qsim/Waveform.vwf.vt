// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/27/2021 12:49:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aceito;
reg clk50Mhz;
reg comprometido;
reg rejeitado;
reg rst;
// wires                                               
wire C0;
wire C1;
wire C2;
wire C3;
wire C4;
wire L0;
wire L1;
wire L2;
wire L3;
wire L4;
wire L5;
wire L6;

// assign statements (if any)                          
Main i1 (
// port map - connection between master ports and signals/registers   
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.L6(L6),
	.aceito(aceito),
	.clk50Mhz(clk50Mhz),
	.comprometido(comprometido),
	.rejeitado(rejeitado),
	.rst(rst)
);
initial 
begin 
#100000000 $finish;
end 

// aceito
initial
begin
	aceito = 1'b0;
end 

// rejeitado
initial
begin
	rejeitado = 1'b1;
end 

// comprometido
initial
begin
	comprometido = 1'b0;
end 

// clk50Mhz
always
begin
	clk50Mhz = 1'b0;
	clk50Mhz = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

