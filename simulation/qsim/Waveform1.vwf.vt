// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/05/2021 12:15:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Linha
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Linha_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_6hz;
reg [2:0] counter;
reg new_data_in;
reg rst;
// wires                                               
wire led_out;

// assign statements (if any)                          
Linha i1 (
// port map - connection between master ports and signals/registers   
	.clk_6hz(clk_6hz),
	.counter(counter),
	.led_out(led_out),
	.new_data_in(new_data_in),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk_6hz
always
begin
	clk_6hz = 1'b0;
	clk_6hz = #20000 1'b1;
	#20000;
end 
// counter[ 2 ]
initial
begin
	counter[2] = 1'b0;
	counter[2] = #320000 1'b1;
	counter[2] = #320000 1'b0;
	counter[2] = #320000 1'b1;
end 
// counter[ 1 ]
initial
begin
	repeat(3)
	begin
		counter[1] = 1'b0;
		counter[1] = #160000 1'b1;
		# 160000;
	end
	counter[1] = 1'b0;
end 
// counter[ 0 ]
initial
begin
	repeat(6)
	begin
		counter[0] = 1'b0;
		counter[0] = #80000 1'b1;
		# 80000;
	end
	counter[0] = 1'b0;
end 

// new_data_in
initial
begin
	new_data_in = 1'b1;
	new_data_in = #40000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

